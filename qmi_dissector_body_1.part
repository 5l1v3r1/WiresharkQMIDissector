f.msglen =    ProtoField.uint16("qmi.message_len", "Message Length", base.DEC)
-- TLVs
f.tlvt =      ProtoField.uint8("qmi.tlv_type", "TLV Type", base.HEX)
f.tlvl =      ProtoField.uint16("qmi.tlv_len", "TLV Length", base.DEC)
f.tlvv =      ProtoField.bytes("qmi.tlv_value", "TLV Value")

--
-- Dissector Function
--
function qmi_proto.dissector(buffer, pinfo, tree)
	-- Set offset according to operating system
	local off
	if package.config:sub(1,1) == '\\' then
		off = 28			-- USB pcap pseudoheader
	else
		off = 64			-- URB header size
	end

	if buffer:len() - off < 12 then
		-- No payload or too short (12 is a min size)
		return
	end

	-- QMUX Header (6 bytes), see GobiNet/QMI.h
	local tf = buffer(off,1)	-- Always 0x01
	if tf:uint() ~= 1 then
		-- Not a QMI packet
		return
	end
	local len = buffer(off+1,2)	-- Length
	if len:le_uint() ~= buffer:len() - off - 1 then
		-- Length does not match
		return
	end
	local flag = buffer(off+3,1)	-- Always 0x00 (out) or 0x80 (in)
	if flag:uint() ~= 0x00 and flag:uint() ~= 0x80 then
		-- Not a QMI packet
		return
	end
	local svcid = buffer(off+4,1)	-- Service ID
	local cid = buffer(off+5,1)	-- Client ID

	-- Setup protocol subtree
	local qmitree = tree:add(qmi_proto, buffer(off, buffer:len() - off), "QMI")
	local hdrtree = qmitree:add(qmi_proto, buffer(off, 6), "QMUX Header")
	hdrtree:add(f.tf, tf)
	hdrtree:add_le(f.len, len)
	hdrtree:add(f.flag, flag)
	hdrtree:add(f.svcid, svcid)
	hdrtree:add(f.cid, cid)
	off = off + 6

	-- Transaction Header (2 or 3 bytes), see GobiAPI/Core/QMIBuffers.h
	local responsebit
	local indicationbit
	if svcid:uint() == 0 then
		responsebit = buffer(off, 1):bitfield(7)
		indicationbit = buffer(off, 1):bitfield(6)
		local thdrtree = qmitree:add(qmi_proto, buffer(off, 2), "Transaction Header")
		tid = buffer(off+1,1)
		thdrtree:add(f.resp_ctl, buffer(off, 1))
		thdrtree:add(f.ind_ctl, buffer(off, 1))
		thdrtree:add(f.tid_ctl, tid)
		off = off + 2
	else
		responsebit = buffer(off, 1):bitfield(6)
		indicationbit = buffer(off, 1):bitfield(5)
		local thdrtree = qmitree:add(qmi_proto, buffer(off, 3), "Transaction Header")
		tid = buffer(off+1,2)
		thdrtree:add(f.comp_svc, buffer(off, 1))
		thdrtree:add(f.resp_svc, buffer(off, 1))
		thdrtree:add(f.ind_svc, buffer(off, 1))
		thdrtree:add_le(f.tid_svc, tid)
		off = off + 3
	end

	-- Message Header (4 bytes), see GobiAPI/Core/QMIBuffers.h
	local msgstr
	msgid = buffer(off, 2)
	msglen = buffer(off+2, 2)
	local mhdrtree = qmitree:add(qmi_proto, buffer(off, 4), "Message Header")
